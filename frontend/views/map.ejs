<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PFVTT - Virtual Tabletop</title>
  <link rel="stylesheet" href="/style.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #1a1a1a;
      color: #fff;
      overflow: hidden;
      user-select: none;
    }
    
    /* Main Layout */
    .vtt-interface {
      display: flex;
      height: 100vh;
      width: 100vw;
    }
    
    /* Top Navigation Bar */
    .top-nav {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 50px;
      background: linear-gradient(135deg, #2c3e50, #34495e);
      border-bottom: 2px solid #3498db;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      z-index: 1000;
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    }
    
    .nav-left {
      display: flex;
      align-items: center;
      gap: 20px;
    }
    
    .logo {
      font-size: 20px;
      font-weight: bold;
      color: #3498db;
    }
    
    .campaign-info {
      display: flex;
      flex-direction: column;
    }
    
    .campaign-name {
      font-size: 14px;
      font-weight: 600;
    }
    
    .campaign-system {
      font-size: 11px;
      color: #bdc3c7;
    }
    
    .nav-right {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .nav-btn {
      background: rgba(52, 152, 219, 0.2);
      border: 1px solid #3498db;
      color: #fff;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
    }
    
    .nav-btn:hover {
      background: #3498db;
      transform: translateY(-1px);
    }
    
    /* Left Sidebar */
    .left-sidebar {
      width: 300px;
      background: linear-gradient(180deg, #2c3e50, #34495e);
      border-right: 2px solid #3498db;
      display: flex;
      flex-direction: column;
      margin-top: 50px;
      box-shadow: 2px 0 10px rgba(0,0,0,0.2);
    }
    
    .sidebar-header {
      padding: 15px;
      background: rgba(52, 152, 219, 0.1);
      border-bottom: 1px solid #3498db;
    }
    
    .sidebar-title {
      font-size: 16px;
      font-weight: 600;
      color: #3498db;
      margin-bottom: 5px;
    }
    
    .sidebar-tabs {
      display: flex;
      background: rgba(0,0,0,0.2);
      border-bottom: 1px solid #3498db;
    }
    
    .sidebar-tab {
      flex: 1;
      padding: 12px 8px;
      text-align: center;
      background: transparent;
      border: none;
      color: #bdc3c7;
      cursor: pointer;
      font-size: 11px;
      font-weight: 500;
      border-right: 1px solid rgba(52, 152, 219, 0.3);
      transition: all 0.3s ease;
    }
    
    .sidebar-tab:last-child {
      border-right: none;
    }
    
    .sidebar-tab.active {
      background: #3498db;
      color: white;
      box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .sidebar-tab:hover:not(.active) {
      background: rgba(52, 152, 219, 0.2);
      color: #fff;
    }
    
    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    
    .content-section {
      display: none;
    }
    
    .content-section.active {
      display: block;
    }
    
    /* Main Canvas */
    .main-canvas {
      flex: 1;
      position: relative;
      background: #1a1a1a;
      margin-top: 50px;
      overflow: hidden;
    }
    
    /* Toolbar */
    .canvas-toolbar {
      position: absolute;
      top: 15px;
      left: 15px;
      z-index: 900;
      display: flex;
      gap: 10px;
    }
    
    .tool-group {
      display: flex;
      background: linear-gradient(135deg, rgba(44, 62, 80, 0.95), rgba(52, 73, 94, 0.95));
      border-radius: 8px;
      padding: 8px;
      gap: 4px;
      border: 1px solid rgba(52, 152, 219, 0.3);
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }
    
    .tool-btn {
      width: 40px;
      height: 40px;
      background: rgba(52, 152, 219, 0.1);
      border: 1px solid rgba(52, 152, 219, 0.3);
      border-radius: 6px;
      color: #bdc3c7;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      transition: all 0.3s ease;
      position: relative;
    }
    
    .tool-btn:hover {
      background: rgba(52, 152, 219, 0.3);
      color: #fff;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .tool-btn.active {
      background: #3498db;
      color: white;
      border-color: #2980b9;
      box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .tool-btn::after {
      content: attr(title);
      position: absolute;
      bottom: -30px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0,0,0,0.9);
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      white-space: nowrap;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s;
    }
    
    .tool-btn:hover::after {
      opacity: 1;
    }
    
    /* Map Viewport */
    .map-viewport {
      width: 100%;
      height: 100%;
      position: relative;
      overflow: hidden;
      background: radial-gradient(circle at center, #2c3e50, #1a1a1a);
      cursor: grab;
    }
    
    .map-viewport:active {
      cursor: grabbing;
    }
    
    .map-container {
      position: absolute;
      width: 4000px;
      height: 4000px;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      transform-origin: center;
    }
    
    .map-grid {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: #2c3e50;
      background-image: 
        linear-gradient(rgba(52, 152, 219, 0.2) 1px, transparent 1px),
        linear-gradient(90deg, rgba(52, 152, 219, 0.2) 1px, transparent 1px);
      background-size: 50px 50px;
      opacity: 0.7;
    }
    
    /* Layer System */
    .map-layer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }
    
    .map-layer.active {
      pointer-events: auto;
    }
    
    #background-layer { z-index: 1; }
    #map-layer { z-index: 2; }
    #walls-layer { z-index: 3; }
    #tokens-layer { z-index: 4; }
    #effects-layer { z-index: 5; }
    #ui-layer { z-index: 6; }
    
    .layer-hidden {
      display: none !important;
    }
    
    /* Layer Controls */
    .layer-controls {
      position: absolute;
      bottom: 15px;
      left: 15px;
      background: linear-gradient(135deg, rgba(44, 62, 80, 0.95), rgba(52, 73, 94, 0.95));
      border-radius: 8px;
      padding: 10px;
      display: flex;
      gap: 6px;
      z-index: 900;
      border: 1px solid rgba(52, 152, 219, 0.3);
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }
    
    .layer-btn {
      width: 35px;
      height: 35px;
      background: rgba(52, 152, 219, 0.1);
      border: 1px solid rgba(52, 152, 219, 0.3);
      border-radius: 6px;
      color: #bdc3c7;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      transition: all 0.3s ease;
      position: relative;
    }
    
    .layer-btn:hover {
      background: rgba(52, 152, 219, 0.3);
      color: #fff;
      transform: translateY(-2px);
    }
    
    .layer-btn.active {
      background: #3498db;
      color: white;
      border-color: #2980b9;
      box-shadow: 0 0 10px rgba(52, 152, 219, 0.5);
    }
    
    .layer-btn.hidden {
      opacity: 0.3;
    }
    
    /* UI Overlays */
    .map-ui-overlay {
      position: absolute;
      top: 15px;
      right: 15px;
      pointer-events: none;
      z-index: 900;
    }
    
    .ui-indicator {
      background: linear-gradient(135deg, rgba(44, 62, 80, 0.9), rgba(52, 73, 94, 0.9));
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 12px;
      margin-bottom: 8px;
      font-family: 'Courier New', monospace;
      border: 1px solid rgba(52, 152, 219, 0.3);
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    
    .help-toggle {
      cursor: pointer;
      pointer-events: auto;
      text-align: center;
      width: 30px;
      height: 30px;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }
    
    .help-toggle:hover {
      background: #3498db;
      transform: scale(1.1);
    }
    
    /* Right Panel */
    .right-panel {
      width: 320px;
      background: linear-gradient(180deg, #2c3e50, #34495e);
      border-left: 2px solid #3498db;
      display: flex;
      flex-direction: column;
      margin-top: 50px;
      box-shadow: -2px 0 10px rgba(0,0,0,0.2);
    }
    
    .panel-header {
      padding: 15px;
      background: rgba(52, 152, 219, 0.1);
      border-bottom: 1px solid #3498db;
    }
    
    .panel-title {
      font-size: 16px;
      font-weight: 600;
      color: #3498db;
    }
    
    .panel-tabs {
      display: flex;
      background: rgba(0,0,0,0.2);
      border-bottom: 1px solid #3498db;
    }
    
    .panel-tab {
      flex: 1;
      padding: 12px 8px;
      text-align: center;
      background: transparent;
      border: none;
      color: #bdc3c7;
      cursor: pointer;
      font-size: 11px;
      font-weight: 500;
      border-right: 1px solid rgba(52, 152, 219, 0.3);
      transition: all 0.3s ease;
    }
    
    .panel-tab:last-child {
      border-right: none;
    }
    
    .panel-tab.active {
      background: #3498db;
      color: white;
    }
    
    .panel-tab:hover:not(.active) {
      background: rgba(52, 152, 219, 0.2);
      color: #fff;
    }
    
    .panel-content {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    
    .panel-section {
      display: none;
    }
    
    .panel-section.active {
      display: block;
    }
    
    /* Common Elements */
    .item-list {
      list-style: none;
    }
    
    .item {
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.1), rgba(41, 128, 185, 0.1));
      margin: 8px 0;
      padding: 12px;
      border-radius: 8px;
      cursor: pointer;
      border: 1px solid rgba(52, 152, 219, 0.3);
      transition: all 0.3s ease;
    }
    
    .item:hover {
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.2), rgba(41, 128, 185, 0.2));
      border-color: #3498db;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    
    .item.selected {
      border-color: #3498db;
      background: linear-gradient(135deg, #3498db, #2980b9);
      color: white;
      box-shadow: 0 0 15px rgba(52, 152, 219, 0.4);
    }
    
    .item-name {
      font-weight: 600;
      margin-bottom: 4px;
      font-size: 13px;
    }
    
    .item-details {
      font-size: 11px;
      color: #bdc3c7;
      opacity: 0.8;
    }
    
    .item.selected .item-details {
      color: rgba(255,255,255,0.9);
    }
    
    .item-actions {
      display: flex;
      gap: 6px;
      margin-top: 8px;
    }
    
    .item-actions button {
      background: rgba(52, 152, 219, 0.2);
      border: 1px solid rgba(52, 152, 219, 0.4);
      color: #bdc3c7;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 11px;
      transition: all 0.3s ease;
    }
    
    .item-actions button:hover {
      background: #3498db;
      color: white;
    }
    
    /* Drag and Drop Styles */
    .item {
      position: relative;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .drag-handle {
      color: #7f8c8d;
      font-size: 16px;
      cursor: grab;
      padding: 4px;
      border-radius: 4px;
      transition: all 0.3s ease;
      user-select: none;
      line-height: 1;
    }
    
    .drag-handle:hover {
      color: #3498db;
      background: rgba(52, 152, 219, 0.1);
    }
    
    .drag-handle:active {
      cursor: grabbing;
    }
    
    .item-content {
      flex: 1;
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: grab;
    }
    
    .item-content:active {
      cursor: grabbing;
    }
    
    .item-icon {
      font-size: 18px;
      width: 24px;
      text-align: center;
      opacity: 0.8;
    }
    
    .item-info {
      flex: 1;
    }
    
    .item.dragging {
      opacity: 0.5;
      transform: scale(0.95);
      border-color: #3498db;
      box-shadow: 0 0 20px rgba(52, 152, 219, 0.3);
    }
    
    .item-actions {
       margin-top: 0;
       margin-left: auto;
     }
     
     /* Map Drag Over Effect */
     #map-viewport.drag-over {
       border: 3px dashed #3498db;
       background: rgba(52, 152, 219, 0.1);
     }
     
     #map-viewport.drag-over::after {
       content: 'Drop token here to place on map';
       position: absolute;
       top: 50%;
       left: 50%;
       transform: translate(-50%, -50%);
       background: rgba(0, 0, 0, 0.8);
       color: #3498db;
       padding: 12px 20px;
       border-radius: 8px;
       font-size: 14px;
       font-weight: 600;
       pointer-events: none;
       z-index: 1000;
       border: 2px solid #3498db;
     }
     
     /* Notification Styles */
     .notification {
       position: fixed;
       top: 20px;
       right: 20px;
       padding: 12px 20px;
       border-radius: 8px;
       color: white;
       font-weight: 600;
       z-index: 10000;
       animation: slideIn 0.3s ease;
       max-width: 300px;
       box-shadow: 0 4px 12px rgba(0,0,0,0.3);
     }
     
     .notification.success {
       background: linear-gradient(135deg, #27ae60, #2ecc71);
     }
     
     .notification.warning {
       background: linear-gradient(135deg, #f39c12, #e67e22);
     }
     
     .notification.error {
       background: linear-gradient(135deg, #e74c3c, #c0392b);
     }
     
     @keyframes slideIn {
       from {
         transform: translateX(100%);
         opacity: 0;
       }
       to {
         transform: translateX(0);
         opacity: 1;
       }
     }
    
    /* Form Elements */
    .btn {
      background: linear-gradient(135deg, #3498db, #2980b9);
      color: white;
      border: none;
      padding: 10px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      font-weight: 500;
      margin: 4px;
      transition: all 0.3s ease;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    
    .btn.secondary {
      background: linear-gradient(135deg, #95a5a6, #7f8c8d);
    }
    
    .btn.danger {
      background: linear-gradient(135deg, #e74c3c, #c0392b);
    }
    
    .input-group {
      margin: 12px 0;
      position: relative;
    }
    
    .input-group label {
      display: block;
      margin-bottom: 8px;
      font-size: 12px;
      color: #ecf0f1;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .input-group input, .input-group textarea {
      width: 100%;
      padding: 10px 14px;
      background: rgba(52, 152, 219, 0.08);
      border: 1px solid rgba(52, 152, 219, 0.25);
      border-radius: 8px;
      color: white;
      font-size: 13px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .input-group select {
      width: 100%;
      padding: 10px 14px;
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.12), rgba(41, 128, 185, 0.08));
      border: 1px solid rgba(52, 152, 219, 0.3);
      border-radius: 8px;
      color: white;
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url('data:image/svg+xml;utf8,<svg fill="%23ecf0f1" height="16" viewBox="0 0 20 20" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M7.293 7.293a1 1 0 011.414 0L10 8.586l1.293-1.293a1 1 0 111.414 1.414l-2 2a1 1 0 01-1.414 0l-2-2a1 1 0 010-1.414z"/></svg>');
      background-repeat: no-repeat;
      background-position: right 12px center;
      padding-right: 40px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .input-group select:hover {
      background: linear-gradient(135deg, rgba(52, 152, 219, 0.18), rgba(41, 128, 185, 0.12));
      border-color: rgba(52, 152, 219, 0.5);
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(52, 152, 219, 0.15);
    }
    
    .input-group input:focus, .input-group select:focus, .input-group textarea:focus {
      outline: none;
      border-color: #3498db;
      background: rgba(52, 152, 219, 0.15);
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2), 0 4px 12px rgba(52, 152, 219, 0.15);
      transform: translateY(-1px);
    }
    
    .input-group select option {
      background: #2c3e50;
      color: #ecf0f1;
      padding: 8px 12px;
      border: none;
    }
    
    .input-group select option:hover {
      background: #34495e;
    }
    
    .search-box {
      width: 100%;
      padding: 8px 12px;
      background: rgba(52, 152, 219, 0.1);
      border: 1px solid rgba(52, 152, 219, 0.3);
      border-radius: 6px;
      color: white;
      font-size: 12px;
      margin-bottom: 12px;
      transition: all 0.3s ease;
    }
    
    .search-box:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 8px rgba(52, 152, 219, 0.3);
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
      padding-bottom: 8px;
      border-bottom: 1px solid rgba(52, 152, 219, 0.3);
    }
    
    .section-title {
      font-size: 14px;
      font-weight: 600;
      color: #3498db;
    }
    
    .add-btn {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      border: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      cursor: pointer;
      font-size: 14px;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }
    
    .add-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    
    /* Map Asset Styles */
    .map-asset {
      position: absolute;
      cursor: pointer;
      transition: all 0.3s ease;
      user-select: none;
      border-radius: 4px;
    }
    
    .map-asset:hover {
      transform: translate(-50%, -50%) scale(1.05);
      box-shadow: 0 4px 12px rgba(0,0,0,0.4);
      border-color: rgba(255, 255, 255, 0.6) !important;
    }
    
    .map-asset.selected {
      border-color: #3498db !important;
      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.5);
    }
    
    .token-preview {
      position: absolute;
      cursor: pointer;
      user-select: none;
      pointer-events: none;
    }
    
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
      0% { transform: translate(-50%, -50%) scale(1); }
      50% { transform: translate(-50%, -50%) scale(1.1); }
      100% { transform: translate(-50%, -50%) scale(1); }
    }
    
    .content-section.active {
      animation: fadeIn 0.3s ease;
    }
    
    .panel-section.active {
      animation: fadeIn 0.3s ease;
    }
    
    /* Responsive Design */
    @media (max-width: 1200px) {
      .left-sidebar {
        width: 250px;
      }
      .right-panel {
        width: 280px;
      }
    }
    
    @media (max-width: 900px) {
      .left-sidebar, .right-panel {
        position: fixed;
        height: calc(100vh - 50px);
        z-index: 1001;
        transform: translateX(-100%);
        transition: transform 0.3s ease;
      }
      
      .right-panel {
        right: 0;
        transform: translateX(100%);
      }
      
      .left-sidebar.open {
        transform: translateX(0);
      }
      
      .right-panel.open {
        transform: translateX(0);
      }
    }
  </style>
</head>
<body>
  <!-- Top Navigation -->
  <nav class="top-nav">
    <div class="nav-left">
      <div class="logo">PFVTT</div>
      <div class="campaign-info">
        <div class="campaign-name" id="campaign-name">Loading Campaign...</div>
        <div class="campaign-system" id="campaign-system">Pathfinder 2E</div>
      </div>
    </div>
    <div class="nav-right">
      <button class="nav-btn" onclick="saveMap()">💾 Save</button>
      <button class="nav-btn" onclick="toggleFullscreen()">⛶ Fullscreen</button>
      <button class="nav-btn" onclick="showSettings()">⚙️ Settings</button>
      <button class="nav-btn" onclick="window.location.href='/campaigns'">← Campaigns</button>
    </div>
  </nav>

  <div class="vtt-interface">
    <!-- Left Sidebar -->
    <aside class="left-sidebar">
      <div class="sidebar-header">
        <div class="sidebar-title">Campaign Assets</div>
      </div>
      
      <div class="sidebar-tabs">
        <button class="sidebar-tab active" data-tab="maps">Maps</button>
        <button class="sidebar-tab" data-tab="assets">Assets</button>
        <button class="sidebar-tab" data-tab="library">Library</button>
      </div>
      
      <div class="sidebar-content">
        <!-- Maps Section -->
        <div class="content-section active" id="maps-section">
          <div class="section-header">
            <span class="section-title">Maps</span>
            <button class="add-btn" onclick="createNewMap()" title="Create New Map">+</button>
          </div>
          <input type="text" class="search-box" placeholder="Search maps..." id="maps-search">
          <ul class="item-list" id="maps-list">
            <!-- Maps will be loaded here -->
          </ul>
        </div>
        
        
        <!-- Assets Section -->
        <div class="content-section" id="assets-section">
          <div class="section-header">
            <span class="section-title">Assets</span>
            <button class="add-btn" onclick="uploadAsset()" title="Upload Asset">+</button>
          </div>
          <input type="text" class="search-box" placeholder="Search assets...">
          <div class="input-group">
            <label>Category</label>
            <select id="asset-category-select">
              <option value="all">All Categories</option>
              <option value="tokens">Tokens</option>
              <option value="backgrounds">Backgrounds</option>
              <option value="props">Props</option>
              <option value="audio">Audio</option>
            </select>
          </div>
          <ul class="item-list" id="assets-list">
            <!-- Assets will be loaded here -->
          </ul>
        </div>
        
        <!-- Library Section -->
        <div class="content-section" id="library-section">
          <div class="section-header">
            <span class="section-title">Library</span>
          </div>
          <div class="item">
            <div class="item-name">Spell Templates</div>
            <div class="item-details">Area effect templates</div>
          </div>
          <div class="item">
            <div class="item-name">Status Effects</div>
            <div class="item-details">Condition markers</div>
          </div>
          <div class="item">
            <div class="item-name">Dice Roller</div>
            <div class="item-details">Virtual dice</div>
          </div>
        </div>
      </div>
    </aside>

    <!-- Main Canvas -->
    <main class="main-canvas">
      <!-- Toolbar -->
      <div class="canvas-toolbar">
        <div class="tool-group">
          <button class="tool-btn active" data-tool="select" title="Select Tool">⚬</button>
          <button class="tool-btn" data-tool="move" title="Pan Tool">✋</button>
          <button class="tool-btn" data-tool="measure" title="Measure Tool">📏</button>
        </div>
        
        <div class="tool-group">
          <button class="tool-btn" data-tool="draw" title="Draw Tool">✏️</button>
          <button class="tool-btn" data-tool="erase" title="Erase Tool">🧽</button>
          <button class="tool-btn" data-tool="text" title="Text Tool">📝</button>
        </div>
        
        <div class="tool-group">
          <button class="tool-btn" data-tool="token" title="Add Token">👤</button>
          <button class="tool-btn" data-tool="light" title="Lighting">💡</button>
          <button class="tool-btn" data-tool="fog" title="Fog of War">🌫️</button>
        </div>
        
        <div class="tool-group">
          <button class="tool-btn" data-tool="zoom-in" title="Zoom In">🔍+</button>
          <button class="tool-btn" data-tool="zoom-out" title="Zoom Out">🔍-</button>
          <button class="tool-btn" data-tool="zoom-fit" title="Fit to Screen">⚏</button>
        </div>
      </div>
      
      <!-- Map Viewport -->
      <div class="map-viewport" id="map-viewport">
        <div class="map-container" id="map-container">
          <div class="map-grid" id="map-grid"></div>
          
          <!-- Layer System -->
          <div class="map-layer" id="background-layer" data-layer="background"></div>
          <div class="map-layer active" id="map-layer" data-layer="map"></div>
          <div class="map-layer" id="walls-layer" data-layer="walls"></div>
          <div class="map-layer" id="tokens-layer" data-layer="tokens"></div>
          <div class="map-layer" id="effects-layer" data-layer="effects"></div>
          <div class="map-layer" id="ui-layer" data-layer="ui"></div>
        </div>
      </div>
      
      <!-- Layer Controls -->
      <div class="layer-controls">
        <button class="layer-btn" data-layer="background" data-target="background-layer" title="Background Layer">🖼️</button>
        <button class="layer-btn active" data-layer="map" data-target="map-layer" title="Map Layer">🗺️</button>
        <button class="layer-btn" data-layer="walls" data-target="walls-layer" title="Walls & Lighting">🧱</button>
        <button class="layer-btn" data-layer="tokens" data-target="tokens-layer" title="Tokens Layer">👤</button>
        <button class="layer-btn" data-layer="effects" data-target="effects-layer" title="Effects Layer">✨</button>
        <button class="layer-btn" data-layer="ui" data-target="ui-layer" title="UI Layer">🎛️</button>
      </div>
      
      <!-- UI Overlays -->
      <div class="map-ui-overlay">
        <div class="ui-indicator" id="zoom-indicator">100%</div>
        <div class="ui-indicator" id="coordinates-indicator">X: 0, Y: 0</div>
        <div class="ui-indicator help-toggle" id="help-toggle" onclick="toggleHelp()" title="Help">?</div>
      </div>
    </main>

    <!-- Right Panel -->
    <aside class="right-panel">
      <div class="panel-header">
        <div class="panel-title">Properties</div>
      </div>
      
      <div class="panel-tabs">
        <button class="panel-tab active" data-panel="properties">Properties</button>
        <button class="panel-tab" data-panel="layers">Layers</button>
        <button class="panel-tab" data-panel="journal">Journal</button>
        <button class="panel-tab" data-panel="chat">Chat</button>
      </div>
      
      <div class="panel-content">
        <!-- Properties Panel -->
        <div class="panel-section active" id="properties-panel">
          <div class="section-header">
            <span class="section-title">Selection</span>
          </div>
          <div id="selection-properties">
            <p style="color: #bdc3c7; font-style: italic;">No object selected</p>
          </div>
          
          <div class="section-header" style="margin-top: 20px;">
            <span class="section-title">Map Settings</span>
          </div>
          <div class="input-group">
            <label>Grid Size</label>
            <select id="grid-size">
              <option value="25">25px</option>
              <option value="50" selected>50px</option>
              <option value="75">75px</option>
              <option value="100">100px</option>
            </select>
          </div>
          <div class="input-group">
            <label>Grid Opacity</label>
            <input type="range" min="0" max="100" value="70" id="grid-opacity">
          </div>
          <button class="btn" onclick="applyGridSettings()">Apply Settings</button>
        </div>
        
        <!-- Layers Panel -->
        <div class="panel-section" id="layers-panel">
          <div class="section-header">
            <span class="section-title">Layer Management</span>
          </div>
          <div class="item">
            <div class="item-name">Background</div>
            <div class="item-actions">
              <button onclick="toggleLayerVisibility('background')">👁️</button>
              <button onclick="lockLayer('background')">🔒</button>
            </div>
          </div>
          <div class="item">
            <div class="item-name">Map</div>
            <div class="item-actions">
              <button onclick="toggleLayerVisibility('map')">👁️</button>
              <button onclick="lockLayer('map')">🔒</button>
            </div>
          </div>
          <div class="item">
            <div class="item-name">Walls</div>
            <div class="item-actions">
              <button onclick="toggleLayerVisibility('walls')">👁️</button>
              <button onclick="lockLayer('walls')">🔒</button>
            </div>
          </div>
          <div class="item">
            <div class="item-name">Tokens</div>
            <div class="item-actions">
              <button onclick="toggleLayerVisibility('tokens')">👁️</button>
              <button onclick="lockLayer('tokens')">🔒</button>
            </div>
          </div>
        </div>
        
        <!-- Journal Panel -->
        <div class="panel-section" id="journal-panel">
          <div class="section-header">
            <span class="section-title">Session Notes</span>
            <button class="add-btn" onclick="addNote()" title="Add Note">+</button>
          </div>
          <textarea placeholder="Add your session notes here..." style="width: 100%; height: 200px; resize: vertical;"></textarea>
          <button class="btn" style="margin-top: 10px;">Save Notes</button>
        </div>
        
        <!-- Chat Panel -->
        <div class="panel-section" id="chat-panel">
          <div class="section-header">
            <span class="section-title">Chat</span>
          </div>
          <div id="chat-messages" style="height: 300px; overflow-y: auto; border: 1px solid rgba(52, 152, 219, 0.3); border-radius: 6px; padding: 10px; margin-bottom: 10px;">
            <div style="color: #bdc3c7; font-style: italic;">Chat system coming soon...</div>
          </div>
          <div style="display: flex; gap: 8px;">
            <input type="text" placeholder="Type a message..." style="flex: 1;">
            <button class="btn">Send</button>
          </div>
        </div>
      </div>
    </aside>
  </div>

  <script>
    // Global Variables
    let currentTool = 'select';
    let currentLayer = 'map';
    let currentMapId = null;
    let userId = null;
    let campaignId = null;
    let zoomLevel = 1;
    let panX = 0;
    let panY = 0;
    let isDragging = false;
    let lastMouseX = 0;
    let lastMouseY = 0;
    
    // Layer visibility state
    const layerVisibility = {
      background: true,
      map: true,
      walls: true,
      tokens: true,
      effects: true,
      ui: true
    };
    
    // Initialize the application
    document.addEventListener('DOMContentLoaded', function() {
      initializeVTT();
    });
    
    // Get campaign ID from session storage
    function getCampaignIdFromSession() {
      return sessionStorage.getItem('current_campaign_id');
    }
    
    // Helper functions for upload
    function getCurrentUserId() {
      return userId;
    }
    
    function getCurrentCampaignId() {
      return campaignId;
    }

    async function initializeVTT() {
      try {
        console.log('Initializing PFVTT...');
        
        // Check authentication
        const user = localStorage.getItem('pfvtt_user') || sessionStorage.getItem('pfvtt_user');
        if (!user) {
          window.location.href = '/login';
          return;
        }
        
        // Get campaign ID from session storage
        campaignId = getCampaignIdFromSession();
        if (!campaignId) {
          alert('No campaign selected');
          window.location.href = '/campaigns';
          return;
        }
        
        // Get user ID
        await getUserId(user);
        
        // Initialize components
        await Promise.all([
          loadCampaignInfo(),
          loadMaps(),
          loadAssets()
        ]);
        
        // Setup event listeners
        setupEventListeners();
        setupMapNavigation();
        setupLayerSystem();
        
        // Listen for campaign data updates
        let lastUpdateCheck = sessionStorage.getItem('campaign_data_updated');
        setInterval(() => {
          const currentUpdate = sessionStorage.getItem('campaign_data_updated');
          if (currentUpdate && currentUpdate !== lastUpdateCheck) {
            lastUpdateCheck = currentUpdate;
            loadCampaignInfo(); // Reload campaign info when data is updated
          }
        }, 1000);
        
        console.log('PFVTT initialized successfully');
        
      } catch (error) {
        console.error('Failed to initialize PFVTT:', error);
        alert('Failed to initialize the virtual tabletop: ' + error.message);
      }
    }
    
    async function getUserId(username) {
      try {
        const response = await fetch(`/api/user_id?username=${encodeURIComponent(username)}`);
        const data = await response.json();
        if (data.success) {
          userId = data.user_id;
        } else {
          throw new Error(data.error || 'Failed to get user ID');
        }
      } catch (error) {
        console.error('Error getting user ID:', error);
        throw error;
      }
    }
    
    async function loadCampaignInfo() {
      try {
        const response = await fetch(`/api/campaigns/${campaignId}`);
        const data = await response.json();
        if (data.success && data.campaign) {
          document.getElementById('campaign-name').textContent = data.campaign.name;
          document.getElementById('campaign-system').textContent = data.campaign.system || 'Pathfinder 2E';
        }
      } catch (error) {
        console.error('Error loading campaign info:', error);
      }
    }
    
    async function loadMaps() {
      try {
        const response = await fetch(`/api/maps?campaign_id=${campaignId}`);
        const data = await response.json();
        if (data.success) {
          displayMaps(data.maps || []);
        }
      } catch (error) {
        console.error('Error loading maps:', error);
      }
    }
    
    function displayMaps(maps) {
      const mapsList = document.getElementById('maps-list');
      mapsList.innerHTML = '';
      
      maps.forEach(map => {
        const li = document.createElement('li');
        li.className = 'item';
        li.dataset.mapId = map.id;
        
        // Add selected class if this is the current map
        if (currentMapId && currentMapId == map.id) {
          li.classList.add('selected');
        }
        
        li.innerHTML = `
          <div class="item-name">${map.name}</div>
          <div class="item-details">Created: ${new Date(map.created_at).toLocaleDateString()}</div>
          <div class="item-actions">
            <button onclick="loadMap('${map.id}')">Select</button>
            <button onclick="editMap('${map.id}')">Edit</button>
            <button onclick="deleteMap('${map.id}')">Delete</button>
          </div>
        `;
        
        // Add click handler for selection
        li.addEventListener('click', function(e) {
          // Don't trigger selection if clicking on buttons
          if (e.target.tagName !== 'BUTTON') {
            loadMap(map.id);
          }
        });
        
        mapsList.appendChild(li);
      });
    } 
    
    function getCategoryIcon(category) {
      const icons = {
        'tokens': '🎭',
        'backgrounds': '🖼️',
        'audio': '🔊',
        'props': '📦'
      };
      return icons[category] || '📄';
    }
    
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 B';
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }
    
    
    async function loadAssets() {
      try {
        const response = await fetch(`/api/assets?campaign_id=${campaignId}`);
        const data = await response.json();
        if (data.success) {
          window.currentAssets = data.assets || [];
          displayAssets(window.currentAssets);
        }
      } catch (error) {
        console.error('Error loading assets:', error);
      }
    }
    
    function displayAssets(assets) {
      const assetsList = document.getElementById('assets-list');
      assetsList.innerHTML = '';
      
      const categoryFilter = document.getElementById('asset-category-select').value;
      const filteredAssets = categoryFilter === 'all' ? assets : assets.filter(asset => asset.category === categoryFilter);
      
      filteredAssets.forEach(asset => {
        const li = document.createElement('li');
        li.className = 'item';
        
        // Create drag handle for tokens (similar to Roll20's approach)
        const dragHandle = asset.category === 'tokens' ? '<div class="drag-handle" title="Drag to place token on map">⋮⋮</div>' : '';
        
        li.innerHTML = `
          ${dragHandle}
          <div class="item-content" ${asset.category === 'tokens' ? 'draggable="true"' : 'draggable="true"'}>
            <div class="item-icon">${getCategoryIcon(asset.category)}</div>
            <div class="item-info">
              <div class="item-name">${asset.name}</div>
              <div class="item-details">${asset.category} • ${(asset.file_size ? formatFileSize(asset.file_size) : 'Unknown size')}</div>
            </div>
          </div>
          <div class="item-actions">
            <button onclick="previewAsset('${asset.id}')" title="Preview asset">👁️</button>
            <button onclick="deleteAsset('${asset.id}')" title="Delete asset">🗑️</button>
          </div>
        `;
        
        // Add drag and drop functionality to the draggable element
        const draggableElement = li.querySelector('[draggable="true"]');
        if (draggableElement) {
          draggableElement.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', JSON.stringify({
              type: 'asset',
              id: asset.id,
              name: asset.name,
              file_url: asset.file_url,
              category: asset.category
            }));
            
            // Add visual feedback during drag
            li.classList.add('dragging');
            
            // Set custom drag image for tokens
            if (asset.category === 'tokens') {
              const dragImage = document.createElement('div');
              dragImage.innerHTML = `🎭 ${asset.name}`;
              dragImage.style.cssText = `
                position: absolute;
                top: -1000px;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 14px;
                white-space: nowrap;
              `;
              document.body.appendChild(dragImage);
              e.dataTransfer.setDragImage(dragImage, 50, 20);
              
              // Clean up drag image after a short delay
              setTimeout(() => {
                if (document.body.contains(dragImage)) {
                  document.body.removeChild(dragImage);
                }
              }, 100);
            }
          });
          
          draggableElement.addEventListener('dragend', function(e) {
            li.classList.remove('dragging');
          });
        }
        
        assetsList.appendChild(li);
      });
    }
    
    function setupEventListeners() {
      // Sidebar tabs
      document.querySelectorAll('.sidebar-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelectorAll('.sidebar-tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
          
          this.classList.add('active');
          document.getElementById(this.dataset.tab + '-section').classList.add('active');
          
          // Reload data when switching to maps tab
          if (this.dataset.tab === 'maps') {
            loadMaps();
          } else if (this.dataset.tab === 'assets') {
            loadAssets();
          }
        });
      });
      
      // Panel tabs
      document.querySelectorAll('.panel-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          document.querySelectorAll('.panel-tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.panel-section').forEach(s => s.classList.remove('active'));
          
          this.classList.add('active');
          document.getElementById(this.dataset.panel + '-panel').classList.add('active');
        });
      });
      
      // Tool buttons
      document.querySelectorAll('.tool-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          selectTool(this.dataset.tool);
        });
      });
      
      // Layer buttons
      document.querySelectorAll('.layer-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          setActiveLayer(this.dataset.layer);
        });
      });
      
      // Asset category filter
      document.getElementById('asset-category-select').addEventListener('change', function() {
        // Re-filter and display current assets instead of reloading
        if (window.currentAssets) {
          displayAssets(window.currentAssets);
        } else {
          loadAssets();
        }
      });
    }
    
    function setupMapNavigation() {
      const viewport = document.getElementById('map-viewport');
      const container = document.getElementById('map-container');
      
      // Mouse wheel zoom
      viewport.addEventListener('wheel', function(e) {
        e.preventDefault();
        
        const rect = viewport.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        
        const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
        zoomLevel *= zoomFactor;
        zoomLevel = Math.max(0.1, Math.min(5, zoomLevel));
        
        updateMapTransform();
        updateZoomIndicator();
      });
      
      // Mouse drag panning
      viewport.addEventListener('mousedown', function(e) {
        if (e.button === 2 || currentTool === 'move') { // Right click or move tool
          isDragging = true;
          lastMouseX = e.clientX;
          lastMouseY = e.clientY;
          viewport.style.cursor = 'grabbing';
        }
      });
      
      document.addEventListener('mousemove', function(e) {
        if (isDragging) {
          const deltaX = e.clientX - lastMouseX;
          const deltaY = e.clientY - lastMouseY;
          
          panX += deltaX;
          panY += deltaY;
          
          updateMapTransform();
          updateCoordinatesIndicator(e);
          
          lastMouseX = e.clientX;
          lastMouseY = e.clientY;
        }
      });
      
      document.addEventListener('mouseup', function() {
        if (isDragging) {
          isDragging = false;
          viewport.style.cursor = currentTool === 'move' ? 'move' : 'grab';
        }
      });
      
      // Prevent context menu on right click
      viewport.addEventListener('contextmenu', function(e) {
        e.preventDefault();
      });
      
      // Update coordinates on mouse move
      viewport.addEventListener('mousemove', function(e) {
        if (!isDragging) {
          updateCoordinatesIndicator(e);
        }
      });
      
      // Setup drag and drop for assets
      viewport.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
        
        // Add visual feedback for valid drop zone
        if (!viewport.classList.contains('drag-over')) {
          viewport.classList.add('drag-over');
        }
      });
      
      viewport.addEventListener('dragleave', function(e) {
        // Remove visual feedback when leaving drop zone
        if (!viewport.contains(e.relatedTarget)) {
          viewport.classList.remove('drag-over');
        }
      });
      
      viewport.addEventListener('drop', function(e) {
        e.preventDefault();
        viewport.classList.remove('drag-over');
        
        // Check if a map is selected
        if (!currentMapId) {
          showNotification('Please select a map first before placing assets.', 'warning');
          return;
        }
        
        try {
          const data = JSON.parse(e.dataTransfer.getData('text/plain'));
          if (data.type === 'asset') {
            const rect = viewport.getBoundingClientRect();
            const pixelX = (e.clientX - rect.left - panX) / zoomLevel;
            const pixelY = (e.clientY - rect.top - panY) / zoomLevel;
            
            // Convert pixel coordinates to grid coordinates
            const gridCoords = pixelToGridCoordinates(pixelX, pixelY);
            
            console.log('Drop coordinates:', {
              pixel: { x: pixelX, y: pixelY },
              grid: gridCoords
            });
            
            // Show placement preview for tokens
            if (data.category === 'tokens') {
              showTokenPlacementPreview(data, gridCoords.x, gridCoords.y);
            } else {
              placeAssetOnMap(data, gridCoords.x, gridCoords.y);
            }
          }
        } catch (error) {
          console.error('Error handling drop:', error);
          showNotification('Error placing asset on map', 'error');
        }
      });
    }
    
    function setupLayerSystem() {
      // Set initial active layer
      setActiveLayer('map');
    }
    
    function selectTool(tool) {
      // Handle zoom tools
      if (tool === 'zoom-in' || tool === 'zoom-out' || tool === 'zoom-fit') {
        handleZoomTool(tool);
        return;
      }
      
      // Remove active class from all tools
      document.querySelectorAll('.tool-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Add active class to selected tool
      const selectedTool = document.querySelector(`[data-tool="${tool}"]`);
      if (selectedTool) {
        selectedTool.classList.add('active');
      }
      
      currentTool = tool;
      updateCursor();
      
      console.log('Selected tool:', tool);
    }
    
    function handleZoomTool(tool) {
      const viewport = document.getElementById('map-viewport');
      const rect = viewport.getBoundingClientRect();
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      
      switch(tool) {
        case 'zoom-in':
          zoomLevel *= 1.2;
          break;
        case 'zoom-out':
          zoomLevel *= 0.8;
          break;
        case 'zoom-fit':
          zoomLevel = 1;
          panX = 0;
          panY = 0;
          break;
      }
      
      zoomLevel = Math.max(0.1, Math.min(5, zoomLevel));
      updateMapTransform();
      updateZoomIndicator();
    }
    
    function setActiveLayer(layerName) {
      // Remove active class from all layers and buttons
      document.querySelectorAll('.map-layer').forEach(layer => {
        layer.classList.remove('active');
      });
      document.querySelectorAll('.layer-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Set new active layer
      const targetLayer = document.getElementById(layerName + '-layer');
      const targetButton = document.querySelector(`[data-layer="${layerName}"]`);
      
      if (targetLayer && targetButton) {
        targetLayer.classList.add('active');
        targetButton.classList.add('active');
        currentLayer = layerName;
        
        console.log('Active layer set to:', layerName);
      }
    }
    
    function updateCursor() {
      const viewport = document.getElementById('map-viewport');
      const cursors = {
        'select': 'grab',
        'move': 'move',
        'measure': 'crosshair',
        'draw': 'crosshair',
        'erase': 'crosshair',
        'text': 'text',
        'token': 'pointer',
        'light': 'pointer',
        'fog': 'pointer'
      };
      
      viewport.style.cursor = cursors[currentTool] || 'grab';
    }
    
    function updateMapTransform() {
      const container = document.getElementById('map-container');
      container.style.transform = `translate(calc(-50% + ${panX}px), calc(-50% + ${panY}px)) scale(${zoomLevel})`;
    }
    
    function updateZoomIndicator() {
      const indicator = document.getElementById('zoom-indicator');
      indicator.textContent = Math.round(zoomLevel * 100) + '%';
    }
    
    function updateCoordinatesIndicator(e) {
      const viewport = document.getElementById('map-viewport');
      const rect = viewport.getBoundingClientRect();
      const pixelX = Math.round((e.clientX - rect.left - panX) / zoomLevel);
      const pixelY = Math.round((e.clientY - rect.top - panY) / zoomLevel);
      
      // Convert to grid coordinates
      const gridCoords = pixelToGridCoordinates(pixelX, pixelY);
      
      const indicator = document.getElementById('coordinates-indicator');
      indicator.textContent = `X: ${pixelX}, Y: ${pixelY} | Grid: ${gridCoords.x}, ${gridCoords.y}`;
    }
    
    // Utility Functions
    function toggleFullscreen() {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    }
    
    function saveMap() {
      // Implement map saving logic
      console.log('Saving map...');
      alert('Map saved successfully!');
    }
    
    function showSettings() {
      // Implement settings modal
      console.log('Opening settings...');
    }
    
    function toggleHelp() {
      // Implement help panel
      console.log('Toggling help...');
    }
    
    async function createNewMap() {
      const name = prompt('Enter map name:');
      if (name && name.trim()) {
        try {
          const user = localStorage.getItem('pfvtt_user') || sessionStorage.getItem('pfvtt_user');
          const response = await fetch('/api/maps', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              name: name.trim(),
              campaign_id: campaignId,
              username: user,
              data: {
                width: 1000,
                height: 1000,
                background_color: '#ffffff'
              }
            })
          });
          
          const result = await response.json();
          if (result.success) {
            console.log('Map created successfully:', result.map_id);
            // Reload the maps list to show the new map
            await loadMaps();
          } else {
            alert('Failed to create map: ' + (result.error || 'Unknown error'));
          }
        } catch (error) {
          console.error('Error creating map:', error);
          alert('Error creating map. Please try again.');
        }
      }
    }
    

    async function uploadAsset() {
      const category = document.getElementById('asset-category-select').value;
      if (category === 'all') {
        alert('Please select a specific category first.');
        return;
      }
      
      const input = document.createElement('input');
      input.type = 'file';
      
      // Set accept attribute based on category
      const acceptTypes = {
        'tokens': '.png',
        'props': '.png', 
        'backgrounds': 'image/*',
        'audio': 'audio/*'
      };
      input.accept = acceptTypes[category] || 'image/*,audio/*';
      input.multiple = false;
      
      input.onchange = async function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        // Validate file size (max 10MB)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
          alert('File size must be less than 10MB');
          return;
        }
        
        // Validate file type based on category requirements
        const allowedTypes = {
          'tokens': ['image/png'],
          'props': ['image/png'],
          'backgrounds': ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
          'audio': ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp3', 'audio/mp4']
        };
        
        if (!allowedTypes[category] || !allowedTypes[category].includes(file.type)) {
          const categoryRequirements = {
            'tokens': 'PNG files only',
            'props': 'PNG files only',
            'backgrounds': 'Image files (JPEG, PNG, GIF, WebP)',
            'audio': 'Audio files (MP3, WAV, OGG)'
          };
          alert(`Invalid file type for ${category}. ${categoryRequirements[category] || 'Please select a valid file.'}`); 
          return;
        }
        
        try {
          // Show loading indicator
          const loadingDiv = document.createElement('div');
          loadingDiv.id = 'upload-loading';
          loadingDiv.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(44, 62, 80, 0.95);
            color: white;
            padding: 20px 30px;
            border-radius: 8px;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
          `;
          loadingDiv.innerHTML = `
            <div style="margin-bottom: 10px;">📤</div>
            <div>Uploading ${file.name}...</div>
            <div style="margin-top: 10px; font-size: 12px; color: #bdc3c7;">Please wait</div>
          `;
          document.body.appendChild(loadingDiv);
          
          // Create FormData for file upload
          const formData = new FormData();
          formData.append('file', file);
          formData.append('user_id', getCurrentUserId());
          formData.append('campaign_id', getCurrentCampaignId());
          formData.append('upload_type', category); // Use category as upload_type
          
          // First upload the file
          const uploadResponse = await fetch('/api/upload', {
            method: 'POST',
            body: formData
          });
          
          const uploadResult = await uploadResponse.json();
          if (!uploadResult.success) {
            throw new Error(uploadResult.error || 'Upload failed');
          }
          
          // Then create the asset record
          const assetData = {
            campaign_id: getCurrentCampaignId(),
            name: file.name.split('.')[0],
            category: category,
            file_url: uploadResult.url,
            file_size: uploadResult.size,
            mime_type: file.type,
            description: ''
          };
        
          const response = await fetch('/api/assets', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(assetData)
          });
          
          const result = await response.json();
          
          // Remove loading indicator
          document.body.removeChild(loadingDiv);
          
          if (result.success) {
            console.log('Asset uploaded successfully:', result.asset_id);
            await loadAssets(); // Reload assets list
            
            // Show success message
            const successDiv = document.createElement('div');
            successDiv.style.cssText = `
              position: fixed;
              top: 20px;
              right: 20px;
              background: linear-gradient(135deg, #27ae60, #229954);
              color: white;
              padding: 15px 20px;
              border-radius: 8px;
              z-index: 10000;
              box-shadow: 0 4px 12px rgba(0,0,0,0.2);
              animation: slideIn 0.3s ease;
            `;
            successDiv.innerHTML = `✅ Asset uploaded successfully!`;
            document.body.appendChild(successDiv);
            
            // Remove success message after 3 seconds
            setTimeout(() => {
              if (document.body.contains(successDiv)) {
                document.body.removeChild(successDiv);
              }
            }, 3000);
            
          } else {
            alert('Failed to upload asset: ' + (result.error || 'Unknown error'));
          }
          
        } catch (error) {
          // Remove loading indicator if it exists
          const loadingDiv = document.getElementById('upload-loading');
          if (loadingDiv) {
            document.body.removeChild(loadingDiv);
          }
          
          console.error('Error uploading asset:', error);
          alert('Error uploading asset. Please try again.');
        }
      };
      
      input.click();
    }
    
    function loadMap(mapId) {
      console.log('Loading map:', mapId);
      
      // Remove selection from all maps
      document.querySelectorAll('#maps-list .item').forEach(item => {
        item.classList.remove('selected');
      });
      
      // Add selection to the clicked map
      const selectedMapItem = document.querySelector(`#maps-list .item[data-map-id="${mapId}"]`);
      if (selectedMapItem) {
        selectedMapItem.classList.add('selected');
      }
      
      // Set current map ID
      currentMapId = mapId;
      
      // Update UI to show selected map
      console.log('Map selected:', mapId);
      
      // Load existing assets on the map
      loadMapAssets(mapId);
    }
    
    async function editMap(mapId) {
      const newName = prompt('Enter new map name:');
      if (newName && newName.trim()) {
        try {
          const response = await fetch(`/api/maps/${mapId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              name: newName.trim()
            })
          });
          
          const result = await response.json();
          if (result.success) {
            console.log('Map updated successfully:', mapId);
            // Reload the maps list to show the updated map
            await loadMaps();
          } else {
            alert('Failed to update map: ' + (result.error || 'Unknown error'));
          }
        } catch (error) {
          console.error('Error updating map:', error);
          alert('Error updating map. Please try again.');
        }
      }
    }
    
    async function deleteMap(mapId) {
      if (confirm('Are you sure you want to delete this map?')) {
        try {
          const response = await fetch(`/api/maps/${mapId}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          if (result.success) {
            console.log('Map deleted successfully:', mapId);
            // Reload the maps list to remove the deleted map
            await loadMaps();
          } else {
            alert('Failed to delete map: ' + (result.error || 'Unknown error'));
          }
        } catch (error) {
          console.error('Error deleting map:', error);
          alert('Error deleting map. Please try again.');
        }
      }
    }
    

    async function previewAsset(assetId) {
      try {
        // Find the asset in the current assets list
        const assetsList = document.getElementById('assets-list');
        const assetItems = assetsList.querySelectorAll('.item');
        let assetData = null;
        
        // Get asset data from the DOM or fetch from API
        const response = await fetch(`/api/assets?campaign_id=${campaignId}`);
        const result = await response.json();
        
        if (result.success) {
          assetData = result.assets.find(asset => asset.id === assetId);
        }
        
        if (!assetData) {
          alert('Asset not found');
          return;
        }
        
        // Create preview modal
        const modal = document.createElement('div');
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.8);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
          cursor: pointer;
        `;
        
        let content = '';
        if (assetData.mime_type && assetData.mime_type.startsWith('image/')) {
          content = `<img src="${assetData.file_url}" style="max-width: 90vw; max-height: 90vh; border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.5);" alt="${assetData.name}">`;
        } else if (assetData.mime_type && assetData.mime_type.startsWith('audio/')) {
          content = `
            <div style="background: #2c3e50; padding: 30px; border-radius: 12px; text-align: center; color: white; min-width: 300px;">
              <h3 style="margin: 0 0 20px 0; color: #ecf0f1;">${assetData.name}</h3>
              <audio controls style="width: 100%; margin-bottom: 15px;">
                <source src="${assetData.file_url}" type="${assetData.mime_type}">
                Your browser does not support the audio element.
              </audio>
              <p style="margin: 0; color: #bdc3c7; font-size: 14px;">Category: ${assetData.category}</p>
            </div>
          `;
        } else {
          content = `
            <div style="background: #2c3e50; padding: 30px; border-radius: 12px; text-align: center; color: white; min-width: 300px;">
              <h3 style="margin: 0 0 15px 0; color: #ecf0f1;">${assetData.name}</h3>
              <p style="margin: 0 0 10px 0; color: #bdc3c7;">Category: ${assetData.category}</p>
              <p style="margin: 0; color: #bdc3c7; font-size: 14px;">File type: ${assetData.mime_type || 'Unknown'}</p>
            </div>
          `;
        }
        
        modal.innerHTML = content;
        
        // Close modal on click
        modal.addEventListener('click', () => {
          document.body.removeChild(modal);
        });
        
        document.body.appendChild(modal);
        
      } catch (error) {
        console.error('Error previewing asset:', error);
        alert('Error previewing asset. Please try again.');
      }
    }
    
    async function deleteAsset(assetId) {
      if (confirm('Are you sure you want to delete this asset? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/assets/${assetId}`, {
            method: 'DELETE'
          });
          
          const result = await response.json();
          
          if (result.success) {
            console.log('Asset deleted successfully:', assetId);
            await loadAssets(); // Reload assets list
          } else {
            alert('Failed to delete asset: ' + (result.error || 'Unknown error'));
          }
        } catch (error) {
          console.error('Error deleting asset:', error);
          alert('Error deleting asset. Please try again.');
        }
      }
    }
    
    async function loadMapAssets(mapId) {
      console.log('Loading assets for map:', mapId);
      
      // Clear existing assets from all layers
      clearMapAssets();
      
      try {
        // Load all types of assets in parallel
        await Promise.all([
          loadMapTokens(mapId),
          loadMapProps(mapId),
          loadMapBackgrounds(mapId),
          loadMapAudio(mapId)
        ]);
        
        console.log('All map assets loaded successfully');
      } catch (error) {
        console.error('Error loading map assets:', error);
        showNotification('Error loading map assets', 'error');
      }
    }
    
    function clearMapAssets() {
      // Clear all asset elements from map layers
      const layers = ['tokens-layer', 'background-layer', 'effects-layer'];
      layers.forEach(layerId => {
        const layer = document.getElementById(layerId);
        if (layer) {
          // Remove all map-asset elements
          const assets = layer.querySelectorAll('.map-asset');
          assets.forEach(asset => asset.remove());
        }
      });
    }
    
    async function loadMapTokens(mapId) {
      try {
        const response = await fetch(`/api/map-tokens?map_id=${mapId}`);
        const result = await response.json();
        
        if (result.success && result.tokens) {
          result.tokens.forEach(token => {
            // Create asset data object compatible with createAssetElement
            const assetData = {
              id: token.asset_id,
              name: token.name,
              file_url: token.file_url || `/images/${token.asset_id}`,
              category: 'tokens'
            };
            
            // Create API result object
            const apiResult = {
              token_id: token.id
            };
            
            // Create visual element using grid coordinates
            createAssetElement(assetData, token.grid_x, token.grid_y, apiResult);
          });
          
          console.log(`Loaded ${result.tokens.length} tokens`);
        }
      } catch (error) {
        console.error('Error loading map tokens:', error);
      }
    }
    
    async function loadMapProps(mapId) {
      try {
        const response = await fetch(`/api/map-props?map_id=${mapId}`);
        const result = await response.json();
        
        if (result.success && result.props) {
          result.props.forEach(prop => {
            // Create asset data object compatible with createAssetElement
            const assetData = {
              id: prop.asset_id,
              name: prop.name,
              file_url: prop.file_url || `/images/${prop.asset_id}`,
              category: 'props'
            };
            
            // Create API result object
            const apiResult = {
              prop_id: prop.id
            };
            
            // Create visual element using grid coordinates
            createAssetElement(assetData, prop.grid_x, prop.grid_y, apiResult);
          });
          
          console.log(`Loaded ${result.props.length} props`);
        }
      } catch (error) {
        console.error('Error loading map props:', error);
      }
    }
    
    async function loadMapBackgrounds(mapId) {
      try {
        const response = await fetch(`/api/map-backgrounds?map_id=${mapId}`);
        const result = await response.json();
        
        if (result.success && result.backgrounds) {
          result.backgrounds.forEach(background => {
            // Create asset data object compatible with createAssetElement
            const assetData = {
              id: background.asset_id,
              name: background.name,
              file_url: background.file_url || `/images/${background.asset_id}`,
              category: 'backgrounds'
            };
            
            // Create API result object
            const apiResult = {
              background_id: background.id
            };
            
            // Create visual element using grid coordinates
            createAssetElement(assetData, background.grid_x, background.grid_y, apiResult);
          });
          
          console.log(`Loaded ${result.backgrounds.length} backgrounds`);
        }
      } catch (error) {
        console.error('Error loading map backgrounds:', error);
      }
    }
    
    async function loadMapAudio(mapId) {
      try {
        const response = await fetch(`/api/map-audio?map_id=${mapId}`);
        const result = await response.json();
        
        if (result.success && result.audio) {
          result.audio.forEach(audio => {
            // Create asset data object compatible with createAssetElement
            const assetData = {
              id: audio.asset_id,
              name: audio.name,
              file_url: audio.file_url || `/images/${audio.asset_id}`,
              category: 'audio'
            };
            
            // Create API result object
            const apiResult = {
              audio_id: audio.id
            };
            
            // Create visual element using grid coordinates
            createAssetElement(assetData, audio.grid_x, audio.grid_y, apiResult);
          });
          
          console.log(`Loaded ${result.audio.length} audio assets`);
        }
      } catch (error) {
        console.error('Error loading map audio:', error);
      }
    }
    
    function toggleLayerVisibility(layerName) {
      const layer = document.getElementById(layerName + '-layer');
      if (layer) {
        layerVisibility[layerName] = !layerVisibility[layerName];
        if (layerVisibility[layerName]) {
          layer.classList.remove('layer-hidden');
        } else {
          layer.classList.add('layer-hidden');
        }
        console.log('Layer', layerName, 'visibility:', layerVisibility[layerName]);
      }
    }
    
    function lockLayer(layerName) {
      console.log('Toggling lock for layer:', layerName);
      // Implement layer locking logic
    }
    
    function applyGridSettings() {
      const gridSize = document.getElementById('grid-size').value;
      const gridOpacity = document.getElementById('grid-opacity').value;
      
      const grid = document.getElementById('map-grid');
      grid.style.backgroundSize = `${gridSize}px ${gridSize}px`;
      grid.style.opacity = gridOpacity / 100;
      
      console.log('Applied grid settings:', { size: gridSize, opacity: gridOpacity });
    }
    
    function getGridSize() {
      return parseInt(document.getElementById('grid-size').value) || 50;
    }
    
    function pixelToGridCoordinates(pixelX, pixelY) {
      const gridSize = getGridSize();
      
      // Snap to grid center
      const gridX = Math.round(pixelX / gridSize);
      const gridY = Math.round(pixelY / gridSize);
      
      return { x: gridX, y: gridY };
    }
    
    function gridToPixelCoordinates(gridX, gridY) {
      const gridSize = getGridSize();
      
      // Convert grid coordinates to pixel coordinates (center of grid cell)
      const pixelX = gridX * gridSize;
      const pixelY = gridY * gridSize;
      
      return { x: pixelX, y: pixelY };
    }
    
    function addNote() {
      console.log('Adding new note...');
      // Implement note adding logic
    }
    
    async function placeAssetOnMap(assetData, x, y) {
      console.log('Placing asset on map:', {
        assetData: assetData,
        x: x,
        y: y,
        currentMapId: currentMapId
      });
      
      try {
        let endpoint = '';
        let requestBody = {
          map_id: currentMapId,
          asset_id: assetData.id,
          name: assetData.name,
          grid_x: x,
          grid_y: y
        };
        
        console.log('Request body:', requestBody);
        
        // Determine endpoint and add category-specific properties
        switch(assetData.category) {
          case 'tokens':
            endpoint = '/api/map-tokens';
            requestBody.scale_x = 1.0;
            requestBody.scale_y = 1.0;
            requestBody.rotation = 0.0;
            break;
          case 'props':
            endpoint = '/api/map-props';
            requestBody.grid_width = 1; // Default grid width
            requestBody.grid_height = 1; // Default grid height
            requestBody.scale_x = 1.0;
            requestBody.scale_y = 1.0;
            requestBody.rotation = 0.0;
            break;
          case 'backgrounds':
            endpoint = '/api/map-backgrounds';
            requestBody.grid_width = 1; // Default grid width
            requestBody.grid_height = 1; // Default grid height
            requestBody.scale_x = 1.0;
            requestBody.scale_y = 1.0;
            requestBody.rotation = 0.0;
            break;
          case 'audio':
            endpoint = '/api/map-audio';
            requestBody.volume = 1.0;
            requestBody.loop_audio = false;
            requestBody.auto_play = false;
            requestBody.radius_grid = 0; // Global audio
            break;
          default:
            console.error('Unknown asset category:', assetData.category);
            alert('Cannot place this type of asset on the map.');
            return;
        }
        
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });
        
        const result = await response.json();
        
        if (result.success) {
          console.log(`${assetData.category} placed successfully:`, result);
          // Create visual representation on the map
          createAssetElement(assetData, x, y, result);
        } else {
          alert(`Failed to place ${assetData.category}: ` + (result.error || 'Unknown error'));
        }
        
      } catch (error) {
        console.error('Error placing asset on map:', error);
        alert('Error placing asset. Please try again.');
      }
    }
    
    function createAssetElement(assetData, gridX, gridY, apiResult) {
      console.log('Creating asset element:', assetData, 'at grid position:', gridX, gridY);
      console.log('API result:', apiResult);
      
      // Convert grid coordinates to pixel coordinates for visual positioning
      const pixelCoords = gridToPixelCoordinates(gridX, gridY);
      const gridSize = getGridSize();
      
      console.log('Positioning asset:', {
        grid: { x: gridX, y: gridY },
        pixel: pixelCoords,
        gridSize: gridSize
      });
      
      // Map asset categories to correct layer IDs
      const layerMapping = {
        'tokens': 'tokens-layer',
        'props': 'tokens-layer', // Props go on tokens layer
        'backgrounds': 'background-layer',
        'audio': 'effects-layer'
      };
      
      const layerId = layerMapping[assetData.category] || 'tokens-layer';
      const targetLayer = document.getElementById(layerId);
      
      console.log('Target layer mapping:', {
        category: assetData.category,
        layerId: layerId,
        layerFound: !!targetLayer
      });
      
      if (!targetLayer) {
        console.error('No target layer found for category:', assetData.category, 'layerId:', layerId);
        return;
      }
      
      const element = document.createElement('div');
      element.className = 'map-asset';
      
      // Size the asset to fit the grid cell
      const assetSize = Math.max(gridSize * 0.8, 30); // 80% of grid size, minimum 30px
      
      element.style.cssText = `
        position: absolute;
        left: ${pixelCoords.x}px;
        top: ${pixelCoords.y}px;
        width: ${assetSize}px;
        height: ${assetSize}px;
        background-image: url('${assetData.file_url}');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        cursor: pointer;
        transform: translate(-50%, -50%);
        z-index: 1;
      `;
      
      element.title = assetData.name;
      element.dataset.assetId = assetData.id;
      element.dataset.gridX = gridX;
      element.dataset.gridY = gridY;
      element.dataset.mapAssetId = apiResult.token_id || apiResult.prop_id || apiResult.background_id || apiResult.audio_id;
      
      // Add click handler for selection/editing
      element.addEventListener('click', function(e) {
        e.stopPropagation();
        console.log('Asset clicked:', assetData.name);
        // TODO: Implement asset selection and editing
      });
      
      targetLayer.appendChild(element);
      console.log('Asset element added to layer:', element);
    }
    
    // Notification system
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 3000);
    }
    
    // Token placement preview
    function showTokenPlacementPreview(tokenData, gridX, gridY) {
      // Convert grid coordinates to pixel coordinates for visual positioning
      const pixelCoords = gridToPixelCoordinates(gridX, gridY);
      const gridSize = getGridSize();
      const assetSize = Math.max(gridSize * 0.8, 30);
      
      // Create preview element
      const preview = document.createElement('div');
      preview.className = 'token-preview';
      preview.style.position = 'absolute';
      preview.style.left = pixelCoords.x + 'px';
      preview.style.top = pixelCoords.y + 'px';
      preview.style.width = assetSize + 'px';
      preview.style.height = assetSize + 'px';
      preview.style.backgroundImage = `url(${tokenData.file_url})`;
      preview.style.backgroundSize = 'cover';
      preview.style.backgroundPosition = 'center';
      preview.style.border = '3px solid #e74c3c';
      preview.style.borderRadius = '50%';
      preview.style.opacity = '0.8';
      preview.style.zIndex = '200';
      preview.style.animation = 'pulse 1s infinite';
      preview.style.transform = 'translate(-50%, -50%)';
      
      // Add pulse animation style if not exists
      if (!document.querySelector('#pulse-animation')) {
        const style = document.createElement('style');
        style.id = 'pulse-animation';
        style.textContent = `
          @keyframes pulse {
            0% { transform: translate(-50%, -50%) scale(1); }
            50% { transform: translate(-50%, -50%) scale(1.1); }
            100% { transform: translate(-50%, -50%) scale(1); }
          }
        `;
        document.head.appendChild(style);
      }
      
      const viewport = document.getElementById('map-viewport');
      viewport.appendChild(preview);
      
      // Show confirmation dialog
      const confirmed = confirm(`Place token "${tokenData.name}" at this position?`);
      
      if (confirmed) {
        // Remove preview and place actual token
        viewport.removeChild(preview);
        placeAssetOnMap(tokenData, gridX, gridY);
        showNotification(`Token "${tokenData.name}" placed successfully!`, 'success');
      } else {
        // Just remove preview
        viewport.removeChild(preview);
      }
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 's':
            e.preventDefault();
            saveMap();
            break;
          case '=':
          case '+':
            e.preventDefault();
            handleZoomTool('zoom-in');
            break;
          case '-':
            e.preventDefault();
            handleZoomTool('zoom-out');
            break;
          case '0':
            e.preventDefault();
            handleZoomTool('zoom-fit');
            break;
        }
      } else {
        switch(e.key) {
          case ' ':
            e.preventDefault();
            selectTool('select');
            break;
          case '1':
            setActiveLayer('background');
            break;
          case '2':
            setActiveLayer('map');
            break;
          case '3':
            setActiveLayer('walls');
            break;
          case '4':
            setActiveLayer('tokens');
            break;
          case '5':
            setActiveLayer('effects');
            break;
          case '6':
            setActiveLayer('ui');
            break;
        }
      }
    });
  </script>
</body>
</html>