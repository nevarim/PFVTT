<!DOCTYPE html>
<html>
<head>
    <title>Roll20 Clone - Virtual Tabletop</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://fonts.googleapis.com/css?family=Nunito:400,600,700&display=swap' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Nunito', sans-serif;
            background: #1a1a1a;
            color: #fff;
            overflow: visible;
        }

        .roll20-container {
            display: flex;
            height: 100vh;
            width: 100vw;
            min-width: 1200px;
        }

        /* Toolbar sinistra */
        .left-toolbar {
            width: 60px;
            background: #2c2c2c;
            border-right: 1px solid #444;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 0;
            z-index: 1000;
        }

        .tool-button {
            width: 40px;
            height: 40px;
            background: #3a3a3a;
            border: none;
            border-radius: 6px;
            color: #ccc;
            cursor: pointer;
            margin: 5px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .tool-button:hover {
            background: #4a4a4a;
            color: #fff;
        }

        .tool-button.active {
            background: #0066cc;
            color: #fff;
        }

        /* Area centrale */
        .main-area {
            flex: 1;
            max-width: calc(100vw - 360px);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Top bar */
        .top-bar {
            height: 50px;
            background: #333;
            border-bottom: 1px solid #444;
            display: flex;
            align-items: center;
            padding: 0 15px;
            justify-content: space-between;
        }

        .page-title {
            font-size: 16px;
            font-weight: 600;
        }

        .zoom-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .zoom-btn {
            background: #444;
            border: none;
            color: #ccc;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .zoom-btn:hover {
            background: #555;
            color: #fff;
        }

        /* Canvas area */
        .canvas-area {
            flex: 1;
            background: #1a1a1a;
            position: relative;
            overflow: auto;
        }

        .game-canvas {
            width: 4000px;
            height: 4000px;
            background: 
                linear-gradient(90deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(0deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
                #2a2a2a;
            background-size: 50px 50px;
            position: relative;
        }

        /* Token styles */
        .token {
            position: absolute;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: 2px solid #fff;
            cursor: pointer;
            transition: all 0.2s ease;
            background-size: cover;
            background-position: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .token:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
        }

        /* Evidenziazione cella di partenza */
        .start-cell-highlight {
            position: absolute;
            width: 48px;
            height: 48px;
            background: rgba(0, 255, 0, 0.3);
            border: 2px solid #00ff00;
            border-radius: 4px;
            z-index: 5;
            animation: pulse-highlight 1.5s infinite;
            pointer-events: none;
        }

        @keyframes pulse-highlight {
            0% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.05); }
            100% { opacity: 0.3; transform: scale(1); }
        }

        /* Right panel */
        .right-panel {
            width: 300px;
            min-width: 300px;
            max-width: 300px;
            flex-shrink: 0;
            flex-grow: 0;
            background: #2c2c2c;
            border-left: 1px solid #444;
            display: flex;
            flex-direction: column;
            position: relative;
            z-index: 100;
        }

        .panel-tabs {
            display: flex;
            background: #333;
            border-bottom: 1px solid #444;
        }

        .panel-tab {
            flex: 1;
            padding: 12px;
            background: none;
            border: none;
            color: #ccc;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .panel-tab.active {
            color: #fff;
            border-bottom-color: #0066cc;
            background: #3a3a3a;
        }

        .panel-content {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
        }

        /* Token library */
        .token-library {
            display: none;
        }

        .token-library.active {
            display: block;
        }

        .token-category {
            margin-bottom: 20px;
        }

        .category-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #0066cc;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .token-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
        }

        .library-token {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 2px solid #555;
            cursor: grab;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            position: relative;
        }

        .library-token:hover {
            transform: scale(1.05);
            border-color: #0066cc;
        }

        .library-token:active {
            cursor: grabbing;
        }

        /* Token colors */
        .token.player, .library-token.player { background: linear-gradient(45deg, #4CAF50, #45a049); }
        .token.npc, .library-token.npc { background: linear-gradient(45deg, #f44336, #d32f2f); }
        .token.monster, .library-token.monster { background: linear-gradient(45deg, #9c27b0, #7b1fa2); }
        .token.object, .library-token.object { background: linear-gradient(45deg, #607d8b, #455a64); }
        .token.vehicle, .library-token.vehicle { background: linear-gradient(45deg, #ff9800, #f57c00); }
        .token.trap, .library-token.trap { background: linear-gradient(45deg, #795548, #5d4037); }

        /* Chat panel */
        .chat-panel {
            display: none;
        }

        .chat-panel.active {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
            background: #1a1a1a;
            margin-bottom: 10px;
            border-radius: 4px;
        }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 8px 12px;
            background: #3a3a3a;
            border: 1px solid #555;
            border-radius: 4px;
            color: #fff;
        }

        .chat-input button {
            padding: 8px 15px;
            background: #0066cc;
            border: none;
            border-radius: 4px;
            color: #fff;
            cursor: pointer;
        }

        .chat-input button:hover {
            background: #0052a3;
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #2a2a2a;
        }

        ::-webkit-scrollbar-thumb {
            background: #555;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #666;
        }

        /* Game Map Selector Menu */
        .gameMapSelector {
            position: fixed;
            top: -300px; /* Div inizialmente nascosto */
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 500px;
            background-color: #2c2c2c;
            border: 2px solid #0066cc;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
            text-align: center;
            transition: top 0.5s ease;
            z-index: 2000;
            color: #fff;
        }

        .gameMapSelectorFlag {
            position: fixed;
            top: 10px;
            left: calc(50% + 250px);
            transform: translateY(-50%);
            width: 50px;
            height: 50px;
            background-color: #0066cc;
            border-radius: 50%;
            cursor: pointer;
            text-align: center;
            line-height: 50px;
            color: white;
            font-weight: bold;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            z-index: 2001;
        }

        .gameMapSelectorFlag:hover {
            background-color: #0052a3;
        }

        .gameMapSelector .content {
             padding: 20px;
         }

         .map-controls {
             margin-bottom: 15px;
         }

         .create-map-btn {
             background: #0066cc;
             color: white;
             border: none;
             padding: 10px 20px;
             border-radius: 5px;
             cursor: pointer;
             font-weight: bold;
             transition: background 0.2s ease;
         }

         .create-map-btn:hover {
             background: #0052a3;
         }

         .map-list {
             max-height: 200px;
             overflow-y: auto;
         }

         .map-item {
             display: flex;
             justify-content: space-between;
             align-items: center;
             padding: 10px;
             margin: 5px 0;
             background: #3a3a3a;
             border-radius: 5px;
             cursor: pointer;
             transition: background 0.2s ease;
         }

         .map-item:hover {
             background: #4a4a4a;
         }

         .map-item.active {
             background: #0066cc;
         }

         .map-name {
             font-weight: bold;
         }

         .map-status {
             font-size: 12px;
             color: #ccc;
         }

         .map-item.active .map-status {
             color: #fff;
         }
    </style>
</head>
<body>
    <div class="roll20-container">
        <!-- Left Toolbar -->
        <div class="left-toolbar">
            <button class="tool-button active" id="select-tool" title="Select">
                <i class="fas fa-mouse-pointer"></i>
            </button>
            <button class="tool-button" id="pan-tool" title="Pan">
                <i class="fas fa-hand-paper"></i>
            </button>
            <button class="tool-button" id="measure-tool" title="Measure">
                <i class="fas fa-ruler"></i>
            </button>
            <button class="tool-button" id="draw-tool" title="Draw">
                <i class="fas fa-pencil-alt"></i>
            </button>
            <button class="tool-button" id="text-tool" title="Text">
                <i class="fas fa-font"></i>
            </button>
            <button class="tool-button" id="fog-tool" title="Fog of War">
                <i class="fas fa-eye-slash"></i>
            </button>
        </div>

        <!-- Main Area -->
        <div class="main-area">
            <!-- Top Bar -->
            <div class="top-bar">
                <div class="page-title">Pathfinder - Un mondo di ombre</div>
                <div class="zoom-controls">
                    <button class="zoom-btn" onclick="zoomOut()">-</button>
                    <span id="zoom-level">100%</span>
                    <button class="zoom-btn" onclick="zoomIn()">+</button>
                    <button class="zoom-btn" onclick="resetZoom()">Reset</button>
                </div>
            </div>

            <!-- Canvas Area -->
            <div class="canvas-area" id="canvas-area">
                <div class="game-canvas" id="game-canvas">
                    <!-- Existing tokens -->
                    <div class="token player" style="top: 200px; left: 300px;">P1</div>
                    <div class="token npc" style="top: 250px; left: 400px;">N1</div>
                </div>
            </div>
        </div>

        <!-- Right Panel -->
        <div class="right-panel">
            <div class="panel-tabs">
                <button class="panel-tab active" onclick="showPanel('tokens')">Tokens</button>
                <button class="panel-tab" onclick="showPanel('chat')">Chat</button>
                <button class="panel-tab" onclick="showPanel('journal')">Journal</button>
            </div>

            <div class="panel-content">
                <!-- Token Library -->
                <div class="token-library active" id="tokens-panel">
                    <div class="token-category">
                        <div class="category-title">Player Characters</div>
                        <div class="token-grid">
                            <div class="library-token player" draggable="true" data-type="player">P</div>
                            <div class="library-token player" draggable="true" data-type="player">H</div>
                            <div class="library-token player" draggable="true" data-type="player">W</div>
                            <div class="library-token player" draggable="true" data-type="player">R</div>
                            <div class="library-token player" draggable="true" data-type="player">M</div>
                            <div class="library-token player" draggable="true" data-type="player">C</div>
                        </div>
                    </div>

                    <div class="token-category">
                        <div class="category-title">NPCs</div>
                        <div class="token-grid">
                            <div class="library-token npc" draggable="true" data-type="npc">G</div>
                            <div class="library-token npc" draggable="true" data-type="npc">V</div>
                            <div class="library-token npc" draggable="true" data-type="npc">K</div>
                            <div class="library-token npc" draggable="true" data-type="npc">Q</div>
                            <div class="library-token npc" draggable="true" data-type="npc">N</div>
                            <div class="library-token npc" draggable="true" data-type="npc">B</div>
                        </div>
                    </div>

                    <div class="token-category">
                        <div class="category-title">Monsters</div>
                        <div class="token-grid">
                            <div class="library-token monster" draggable="true" data-type="monster">D</div>
                            <div class="library-token monster" draggable="true" data-type="monster">O</div>
                            <div class="library-token monster" draggable="true" data-type="monster">T</div>
                            <div class="library-token monster" draggable="true" data-type="monster">S</div>
                                            <div class="library-token monster" draggable="true" data-type="monster">L</div>
                            <div class="library-token monster" draggable="true" data-type="monster">Z</div>
                        </div>
                    </div>

                    <div class="token-category">
                        <div class="category-title">Objects & Vehicles</div>
                        <div class="token-grid">
                            <div class="library-token object" draggable="true" data-type="object">📦</div>
                            <div class="library-token object" draggable="true" data-type="object">🗡️</div>
                            <div class="library-token object" draggable="true" data-type="object">🛡️</div>
                            <div class="library-token vehicle" draggable="true" data-type="vehicle">🐎</div>
                            <div class="library-token vehicle" draggable="true" data-type="vehicle">⛵</div>
                            <div class="library-token trap" draggable="true" data-type="trap">⚠️</div>
                        </div>
                    </div>
                </div>

                <!-- Chat Panel -->
                <div class="chat-panel" id="chat-panel">
                    <div class="chat-messages" id="chat-messages">
                        <div style="color: #888; font-style: italic;">Chat is ready...</div>
                    </div>
                    <div class="chat-input">
                        <input type="text" id="chat-input" placeholder="Type your message..." onkeypress="handleChatKeypress(event)">
                        <button onclick="sendMessage()">Send</button>
                    </div>
                </div>

                <!-- Journal Panel -->
                <div class="journal-panel" id="journal-panel" style="display: none;">
                    <div style="color: #888; font-style: italic;">Journal entries will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Game Map Selector Menu -->
    <div class="gameMapSelector" id="gameMapSelector">
        <div class="content">
            <h3>Gestione Mappe</h3>
            <div class="map-controls">
                <button class="create-map-btn" onclick="createNewMap()">+ Nuova Mappa</button>
            </div>
            <div class="map-list" id="mapList">
                <div class="map-item active" data-map-id="default" onclick="switchToMap('default')">
                    <span class="map-name">Mappa Principale</span>
                    <span class="map-status">Attiva</span>
                </div>
            </div>
        </div>
    </div>
    <div class="gameMapSelectorFlag" onclick="toggleGameMapSelector()">Maps</div>

    <script>
        // Application state management
        const AppState = {
            currentTool: 'select',
            zoomLevel: 1,
            draggedToken: null,
            tokenCounter: 1,
            isDragging: false,
            showingMeasurement: false,
            measurementLine: null,
            measurementText: null,
            measurementContainer: null,
            currentToken: null,
            isPanning: false,
            panData: {
                startX: 0,
                startY: 0,
                startScrollX: 0,
                startScrollY: 0
            },
            
            // Constants
            GRID_SIZE: 50,
            METERS_PER_CELL: 1.5,
            MIN_ZOOM: 0.3,
            MAX_ZOOM: 3,
            ZOOM_FACTOR: 1.2
        };

        // Utility functions
        const Utils = {
            clamp: (value, min, max) => Math.min(Math.max(value, min), max),
            
            sanitizeInput: (input) => {
                if (typeof input !== 'string') return '';
                return input.trim().replace(/<[^>]*>/g, ''); // Basic XSS protection
            },
            
            debounce: (func, wait) => {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            },
            
            snapToGrid: (value) => {
                return Math.round(value / AppState.GRID_SIZE) * AppState.GRID_SIZE;
            },
            
            getGridPosition: (x, y) => {
                return {
                    x: Math.floor(x / AppState.GRID_SIZE),
                    y: Math.floor(y / AppState.GRID_SIZE)
                };
            },
            
            calculateDistance: (x1, y1, x2, y2) => {
                const dx = x2 - x1;
                const dy = y2 - y1;
                const pixelDistance = Math.sqrt(dx * dx + dy * dy);
                const cellDistance = pixelDistance / AppState.GRID_SIZE;
                const meterDistance = cellDistance * AppState.METERS_PER_CELL;
                return {
                    pixels: pixelDistance,
                    cells: cellDistance,
                    meters: meterDistance
                };
            }
        };

        // Tool management
        const ToolManager = {
            setActiveTool: (toolName) => {
                // Remove active class from all tools
                document.querySelectorAll('.tool-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // Add active class to selected tool
                const toolButton = document.getElementById(toolName + '-tool');
                if (toolButton) {
                    toolButton.classList.add('active');
                }
                
                // Update app state
                AppState.currentTool = toolName;
                
                // Clear any active measurements
                MeasurementTool.clearMeasurement();
                
                // Update cursor based on tool
                const canvas = document.getElementById('game-canvas');
                switch (toolName) {
                    case 'pan':
                        canvas.style.cursor = 'grab';
                        break;
                    case 'measure':
                        canvas.style.cursor = 'crosshair';
                        break;
                    case 'draw':
                        canvas.style.cursor = 'crosshair';
                        break;
                    case 'text':
                        canvas.style.cursor = 'text';
                        break;
                    default:
                        canvas.style.cursor = 'default';
                }
            }
        };

        // Zoom management
        const ZoomManager = {
            updateZoom: (newZoom) => {
                AppState.zoomLevel = Utils.clamp(newZoom, AppState.MIN_ZOOM, AppState.MAX_ZOOM);
                
                const canvas = document.getElementById('game-canvas');
                canvas.style.transform = `scale(${AppState.zoomLevel})`;
                canvas.style.transformOrigin = '0 0';
                
                // Update zoom display
                const zoomDisplay = document.getElementById('zoom-level');
                if (zoomDisplay) {
                    zoomDisplay.textContent = Math.round(AppState.zoomLevel * 100) + '%';
                }
            }
        };

        // Measurement tool
        const MeasurementTool = {
            startMeasurement: (x, y) => {
                if (AppState.currentTool !== 'measure') return;
                
                AppState.showingMeasurement = true;
                
                // Create measurement container if it doesn't exist
                if (!AppState.measurementContainer) {
                    AppState.measurementContainer = document.createElement('div');
                    AppState.measurementContainer.style.position = 'absolute';
                    AppState.measurementContainer.style.pointerEvents = 'none';
                    AppState.measurementContainer.style.zIndex = '1000';
                    document.getElementById('game-canvas').appendChild(AppState.measurementContainer);
                }
                
                // Create line element
                AppState.measurementLine = document.createElement('div');
                AppState.measurementLine.style.position = 'absolute';
                AppState.measurementLine.style.background = '#ff0000';
                AppState.measurementLine.style.height = '2px';
                AppState.measurementLine.style.transformOrigin = '0 0';
                AppState.measurementLine.style.left = x + 'px';
                AppState.measurementLine.style.top = y + 'px';
                AppState.measurementContainer.appendChild(AppState.measurementLine);
                
                // Create text element
                AppState.measurementText = document.createElement('div');
                AppState.measurementText.style.position = 'absolute';
                AppState.measurementText.style.background = 'rgba(0, 0, 0, 0.8)';
                AppState.measurementText.style.color = '#fff';
                AppState.measurementText.style.padding = '4px 8px';
                AppState.measurementText.style.borderRadius = '4px';
                AppState.measurementText.style.fontSize = '12px';
                AppState.measurementText.style.whiteSpace = 'nowrap';
                AppState.measurementContainer.appendChild(AppState.measurementText);
                
                AppState.measurementStartX = x;
                AppState.measurementStartY = y;
            },
            
            updateMeasurement: (x, y) => {
                if (!AppState.showingMeasurement || !AppState.measurementLine) return;
                
                const dx = x - AppState.measurementStartX;
                const dy = y - AppState.measurementStartY;
                const distance = Math.sqrt(dx * dx + dy * dy);
                const angle = Math.atan2(dy, dx) * 180 / Math.PI;
                
                // Update line
                AppState.measurementLine.style.width = distance + 'px';
                AppState.measurementLine.style.transform = `rotate(${angle}deg)`;
                
                // Calculate distances
                const distanceData = Utils.calculateDistance(
                    AppState.measurementStartX, AppState.measurementStartY, x, y
                );
                
                // Update text
                AppState.measurementText.textContent = 
                    `${distanceData.cells.toFixed(1)} cells (${distanceData.meters.toFixed(1)}m)`;
                AppState.measurementText.style.left = (x + 10) + 'px';
                AppState.measurementText.style.top = (y - 25) + 'px';
            },
            
            clearMeasurement: () => {
                if (AppState.measurementContainer) {
                    AppState.measurementContainer.innerHTML = '';
                }
                AppState.showingMeasurement = false;
                AppState.measurementLine = null;
                AppState.measurementText = null;
            }
        };

        // Token management
        const TokenManager = {
            createToken: (type, x, y, content = '') => {
                const token = document.createElement('div');
                token.className = `token ${type}`;
                token.style.left = Utils.snapToGrid(x) + 'px';
                token.style.top = Utils.snapToGrid(y) + 'px';
                token.textContent = content || type.charAt(0).toUpperCase();
                token.id = `token-${AppState.tokenCounter++}`;
                
                // Add event listeners
                token.addEventListener('mousedown', TokenManager.handleTokenMouseDown);
                token.addEventListener('contextmenu', TokenManager.handleTokenRightClick);
                
                document.getElementById('game-canvas').appendChild(token);
                return token;
            },
            
            handleTokenMouseDown: (e) => {
                if (AppState.currentTool !== 'select') return;
                
                e.preventDefault();
                e.stopPropagation();
                
                const token = e.target;
                AppState.currentToken = token;
                AppState.isDragging = true;
                
                // Add start cell highlight
                TokenManager.addStartCellHighlight(token);
                
                const rect = token.getBoundingClientRect();
                const canvasRect = document.getElementById('game-canvas').getBoundingClientRect();
                
                AppState.dragOffset = {
                    x: e.clientX - rect.left,
                    y: e.clientY - rect.top
                };
                
                document.addEventListener('mousemove', TokenManager.handleTokenDrag);
                document.addEventListener('mouseup', TokenManager.handleTokenDragEnd);
            },
            
            handleTokenDrag: (e) => {
                if (!AppState.isDragging || !AppState.currentToken) return;
                
                const canvasRect = document.getElementById('game-canvas').getBoundingClientRect();
                const x = e.clientX - canvasRect.left - AppState.dragOffset.x;
                const y = e.clientY - canvasRect.top - AppState.dragOffset.y;
                
                AppState.currentToken.style.left = Utils.snapToGrid(x) + 'px';
                AppState.currentToken.style.top = Utils.snapToGrid(y) + 'px';
            },
            
            handleTokenDragEnd: (e) => {
                if (AppState.isDragging) {
                    AppState.isDragging = false;
                    TokenManager.removeStartCellHighlight();
                    
                    document.removeEventListener('mousemove', TokenManager.handleTokenDrag);
                    document.removeEventListener('mouseup', TokenManager.handleTokenDragEnd);
                    
                    AppState.currentToken = null;
                }
            },
            
            handleTokenRightClick: (e) => {
                e.preventDefault();
                // TODO: Show context menu for token options
                console.log('Token right-clicked:', e.target.id);
            },
            
            addStartCellHighlight: (token) => {
                const highlight = document.createElement('div');
                highlight.className = 'start-cell-highlight';
                highlight.id = 'start-cell-highlight';
                highlight.style.left = token.style.left;
                highlight.style.top = token.style.top;
                document.getElementById('game-canvas').appendChild(highlight);
            },
            
            removeStartCellHighlight: () => {
                const highlight = document.getElementById('start-cell-highlight');
                if (highlight) {
                    highlight.remove();
                }
            }
        };

        // Pan tool
        const PanTool = {
            startPan: (e) => {
                if (AppState.currentTool !== 'pan') return;
                
                AppState.isPanning = true;
                const canvasArea = document.getElementById('canvas-area');
                
                AppState.panData.startX = e.clientX;
                AppState.panData.startY = e.clientY;
                AppState.panData.startScrollX = canvasArea.scrollLeft;
                AppState.panData.startScrollY = canvasArea.scrollTop;
                
                document.getElementById('game-canvas').style.cursor = 'grabbing';
                
                document.addEventListener('mousemove', PanTool.handlePan);
                document.addEventListener('mouseup', PanTool.endPan);
            },
            
            handlePan: (e) => {
                if (!AppState.isPanning) return;
                
                const canvasArea = document.getElementById('canvas-area');
                const deltaX = AppState.panData.startX - e.clientX;
                const deltaY = AppState.panData.startY - e.clientY;
                
                canvasArea.scrollLeft = AppState.panData.startScrollX + deltaX;
                canvasArea.scrollTop = AppState.panData.startScrollY + deltaY;
            },
            
            endPan: () => {
                AppState.isPanning = false;
                document.getElementById('game-canvas').style.cursor = 'grab';
                
                document.removeEventListener('mousemove', PanTool.handlePan);
                document.removeEventListener('mouseup', PanTool.endPan);
            }
        };

        // Panel management
        function showPanel(panelName) {
            // Hide all panels
            document.querySelectorAll('.token-library, .chat-panel, .journal-panel').forEach(panel => {
                panel.style.display = 'none';
                panel.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.panel-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected panel
            const targetPanel = document.getElementById(panelName + '-panel');
            if (targetPanel) {
                targetPanel.style.display = panelName === 'chat' ? 'flex' : 'block';
                targetPanel.classList.add('active');
            }
            
            // Add active class to clicked tab
            event.target.classList.add('active');
        }

        // Chat functionality
        function sendMessage() {
            const input = document.getElementById('chat-input');
            const messages = document.getElementById('chat-messages');
            
            const message = Utils.sanitizeInput(input.value);
            if (!message.trim()) return;
            
            const messageElement = document.createElement('div');
            messageElement.style.marginBottom = '8px';
            messageElement.innerHTML = `<strong>You:</strong> ${message}`;
            
            messages.appendChild(messageElement);
            messages.scrollTop = messages.scrollHeight;
            
            input.value = '';
        }

        function handleChatKeypress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        // Map selector functionality
        function toggleGameMapSelector() {
            const selector = document.getElementById('gameMapSelector');
            const isVisible = selector.style.top === '10px';
            
            if (isVisible) {
                selector.style.top = '-300px';
            } else {
                selector.style.top = '10px';
            }
        }

        function createNewMap() {
            const mapName = prompt('Enter map name:');
            if (mapName) {
                console.log('Creating new map:', mapName);
                // TODO: Implement map creation
            }
        }

        function switchToMap(mapId) {
            console.log('Switching to map:', mapId);
            // TODO: Implement map switching
        }

        // Zoom functions
        function zoomIn() {
            ZoomManager.updateZoom(AppState.zoomLevel * AppState.ZOOM_FACTOR);
        }

        function zoomOut() {
            ZoomManager.updateZoom(AppState.zoomLevel / AppState.ZOOM_FACTOR);
        }

        function resetZoom() {
            ZoomManager.updateZoom(1);
        }

        // Event listeners setup
        document.addEventListener('DOMContentLoaded', () => {
            // Tool button event listeners
            document.querySelectorAll('.tool-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const toolName = e.target.closest('.tool-button').id.replace('-tool', '');
                    ToolManager.setActiveTool(toolName);
                });
            });
            
            // Canvas event listeners
            const canvas = document.getElementById('game-canvas');
            
            canvas.addEventListener('mousedown', (e) => {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                switch (AppState.currentTool) {
                    case 'measure':
                        MeasurementTool.startMeasurement(x, y);
                        break;
                    case 'pan':
                        PanTool.startPan(e);
                        break;
                }
            });
            
            canvas.addEventListener('mousemove', (e) => {
                if (AppState.currentTool === 'measure' && AppState.showingMeasurement) {
                    const rect = canvas.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    MeasurementTool.updateMeasurement(x, y);
                }
            });
            
            canvas.addEventListener('mouseup', () => {
                if (AppState.currentTool === 'measure') {
                    MeasurementTool.clearMeasurement();
                }
            });
            
            // Library token drag and drop
            document.querySelectorAll('.library-token').forEach(token => {
                token.addEventListener('dragstart', (e) => {
                    AppState.draggedToken = {
                        type: e.target.dataset.type,
                        content: e.target.textContent
                    };
                });
            });
            
            canvas.addEventListener('dragover', (e) => {
                e.preventDefault();
            });
            
            canvas.addEventListener('drop', (e) => {
                e.preventDefault();
                
                if (AppState.draggedToken) {
                    const rect = canvas.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    
                    TokenManager.createToken(
                        AppState.draggedToken.type,
                        x - 24, // Center the token
                        y - 24,
                        AppState.draggedToken.content
                    );
                    
                    AppState.draggedToken = null;
                }
            });
            
            // Zoom with mouse wheel
            canvas.addEventListener('wheel', (e) => {
                e.preventDefault();
                
                if (e.deltaY < 0) {
                    zoomIn();
                } else {
                    zoomOut();
                }
            });
            
            // Initialize zoom display
            ZoomManager.updateZoom(1);
        });
    </script>
</body>
</html>
